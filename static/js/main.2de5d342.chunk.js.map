{"version":3,"sources":["Square.js","Board.js","helpers/index.js","index.js","Game.js"],"names":["XIcon","src","OIcon","Square","props","className","winning","value","onClick","Board","renderSquare","i","squares","winningLine","includes","calculateWinner","lines","length","a","b","c","winner","line","ReactDOM","render","useState","Array","fill","history","setHistory","stepNumber","setStepNumber","xIsNext","setXIsNext","current","moves","map","step","move","desc","key","jumpTo","status","newHistory","slice","concat","handleClick","document","getElementById"],"mappings":"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","file":"static/js/main.2de5d342.chunk.js","sourcesContent":["import React from \"react\";\nimport SVG from \"react-inlinesvg\";\n\nconst XIcon = () => <SVG src=\"X.svg\" />;\nconst OIcon = () => <SVG src=\"O.svg\" />;\n\nexport const Square = props => {\n  return (\n    <div className=\"square\">\n      <button\n        className={\n          props.winning ? \"winning \" + props.value : \"standard \" + props.value\n        }\n        onClick={props.onClick}\n      >\n        {props.value === \"X\" ? <XIcon /> : props.value === \"O\" ? <OIcon /> : \"\"}\n      </button>\n    </div>\n  );\n};\n","import React from 'react';\nimport { Square } from './Square'\n\nexport const Board = (props) => {\n    const renderSquare = (i) => {\n        return (\n            <Square\n                value={props.squares[i]}\n                onClick={() => props.onClick(i)}\n                winning={\n                    props.winningLine \n                        ? props.winningLine.includes(i)\n                        : false\n                }\n            />\n        )\n    }\n\n    return (\n        <div>\n            <div className=\"board-row\">\n                {renderSquare(0)}\n                {renderSquare(1)}\n                {renderSquare(2)}\n            </div>\n            <div className=\"board-row\">\n                {renderSquare(3)}\n                {renderSquare(4)}\n                {renderSquare(5)}\n            </div>\n            <div className=\"board-row\">\n                {renderSquare(6)}\n                {renderSquare(7)}\n                {renderSquare(8)}\n            </div>\n        </div>\n    );\n}\n","export const calculateWinner = (squares) => {\n    const lines = [\n        [0, 1, 2],\n        [3, 4, 5],\n        [6, 7, 8],\n        [0, 3, 6],\n        [1, 4, 7],\n        [2, 5, 8],\n        [0, 4, 8],\n        [2, 4, 6],\n    ];\n    for (let i = 0; i < lines.length; i++) {\n        const [a, b, c] = lines[i];\n        const threeInLine = squares[a] && squares[a] === squares[b]\n            && squares[a] === squares[c];\n        if (threeInLine) {\n            return {\n                winner: squares[a], \n                line: [a, b, c],\n            };\n        }\n    }\n    return null;\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\n\nimport { Game } from './Game'\n\nReactDOM.render(\n    <Game />,\n    document.getElementById('root')\n);\n","import React, { useState } from 'react';\nimport { Board } from './Board';\nimport { calculateWinner } from './helpers';\n\nexport const Game = () => {\n    const [history, setHistory] = useState([{\n        squares: Array(9).fill(null),\n    }]);\n    const [stepNumber, setStepNumber] = useState(0);\n    const [xIsNext, setXIsNext] = useState(true);\n\n    let current = history[stepNumber];\n    let winner = calculateWinner(current.squares);\n    let moves = history.map((step, move) => {\n        const desc = move ?\n            'Go to move #' + move :\n            'Go to game start';\n        return (\n            <li key={move}>\n                <button onClick={() => jumpTo(move)}>{desc}</button>\n            </li>\n        )\n    });\n    let status = winner \n        ? 'Winner: ' + winner.winner\n        : 'Move: ' + (xIsNext ? 'X' : 'O');\n\n    let winningLine = null;\n    if (winner) {\n        winningLine = winner.line;\n    }\n\n    const handleClick = (i) => {\n        let newHistory = history.slice(0, stepNumber + 1);\n        current = newHistory[newHistory.length - 1];\n        let squares = current.squares.slice();\n        if (calculateWinner(squares) || squares[i]) {\n            return;\n        }\n        squares[i] = xIsNext ? 'X' : 'O';\n        newHistory = newHistory.concat([{\n            squares: squares,\n        }]);\n        setHistory(newHistory);\n        setStepNumber(newHistory.length-1);\n        setXIsNext(!xIsNext);\n    }\n\n    const jumpTo = (step) => {\n        setStepNumber(step);\n        setXIsNext((step % 2) === 0)\n    }\n\n    return (\n        <div className=\"game\">\n            <div className=\"game-board\">\n                <Board\n                    squares={current.squares}\n                    onClick={(i) => handleClick(i)}\n                    winningLine={winningLine}\n                />\n            </div>\n            <div className=\"game-info\">\n                <div><h2>{status}</h2></div>\n                <ol>{moves}</ol>\n            </div>\n        </div>\n    );\n}\n"],"sourceRoot":""}